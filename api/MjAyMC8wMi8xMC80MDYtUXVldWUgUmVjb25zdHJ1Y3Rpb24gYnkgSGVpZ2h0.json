{"title":"406.Queue Reconstruction by Height","date":"2020-02-10T13:57:33.000Z","date_formatted":{"ll":"Feb 10, 2020","L":"02/10/2020","MM-DD":"02-10"},"link":"2020/02/10/406-Queue Reconstruction by Height","tags":["LeetCode"],"categories":["算法"],"updated":"2022-01-25T02:24:01.637Z","content":"<h5 id=\"description\">Description<a title=\"#description\" href=\"#description\"></a></h5>\n<p>Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue.</p>\n<p>Note:<br>\nThe number of people is less than 1,100.</p>\n<p>Example:<br>\nInput:<br>\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</p>\n<p>Output:<br>\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</p>\n<h5 id=\"code\">Code<a title=\"#code\" href=\"#code\"></a></h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] reconstructQueue(<span class=\"type\">int</span>[][] people) &#123;</span><br><span class=\"line\">    Arrays.sort(people, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;<span class=\"type\">int</span>[]&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span>[] a, <span class=\"type\">int</span>[] b)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[<span class=\"number\">0</span>] != b[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> b[<span class=\"number\">0</span>] - a[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[<span class=\"number\">1</span>] - b[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;<span class=\"type\">int</span>[]&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span>[] p : people)&#123;</span><br><span class=\"line\">        result.add(p[<span class=\"number\">1</span>], p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[people.length][]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"ICMP 协议解析","link":"2020/02/20/NetworkKnowleges1"},"next":{"title":"1.TwoSum","link":"2019/07/28/1-TwoSum"},"plink":"https://zhoufeichi.com/2020/02/10/406-Queue Reconstruction by Height/","reward":true}