{"title":"Git使用总结","date":"2018-03-11T10:23:39.000Z","date_formatted":{"ll":"Mar 11, 2018","L":"03/11/2018","MM-DD":"03-11"},"link":"2018/03/11/Git","tags":["Git"],"categories":["笔记"],"updated":"2022-01-24T11:02:36.647Z","content":"<h3 id=\"创建仓库\">创建仓库<a title=\"#创建仓库\" href=\"#创建仓库\"></a></h3>\n<ul>\n<li>\n<p>进入一个目录<br>\n<code>cd dir</code></p>\n</li>\n<li>\n<p>为仓库新建一个空的目录<br>\n<code>mkdir myrepository</code></p>\n</li>\n<li>\n<p>进入该新的目录<br>\n<code>cd myrepository</code></p>\n</li>\n<li>\n<p>初始化目录，使其成为一个空的仓库<br>\n<code>git init</code></p>\n</li>\n</ul>\n<h3 id=\"往仓库添加内容\">往仓库添加内容<a title=\"#往仓库添加内容\" href=\"#往仓库添加内容\"></a></h3>\n<ul>\n<li>\n<p>使用<code>add</code>命令往仓库添加内容<br>\n<code>git add &quot;file_name&quot;</code></p>\n</li>\n<li>\n<p>提交内容<br>\n<code>git commit -m &quot;notes&quot;</code><br>\n参数说明：</p>\n<ul>\n<li><code>-m: &quot;notes&quot;</code>描述此次修改的说明，如果不加 <code>-m</code> 参数，那么会进去<code>vi</code>编辑模式，让你添加内容\n<ul>\n<li><code>vi</code>模式中,\n<ul>\n<li>命令 i 表示插入</li>\n<li><code>shift + :</code>表示进入命令行，可以输入指令</li>\n<li><code>wq</code>表示强制性写入文件并退出，即使文件没有被修改也强制写入，并更新文件的修改时间</li>\n<li><code>x</code>表示写入文件并退出，仅当文件被修改时才写入，并更新文件修改时间，否则不会更新文件修改时间</li>\n</ul>\n</li>\n<li>当 commit 的时候发现 message 信息写错时\n<ul>\n<li>还未 push 的情况下，通过`git commit --amend -m &quot;message&quot;来修改注释信息</li>\n<li>已经 push ，但是远程没有其他人下载或者改动\n<ul>\n<li><code>git commit --amend -m &quot;message&quot;</code>修改信息</li>\n<li><code>git push --force-with-lease origin master</code>推送到远程</li>\n</ul>\n</li>\n<li>已经 push ，而且已经有其他人下载或改动\n<ul>\n<li><code>git fetch origin</code></li>\n<li><code>git reset --hard origin/master</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>可以使用<code>git status</code>来查看当前的仓库状态，包括是否发生更改，但是还未提交。当我们知道有内容更改后可以继续用<code>git diff</code>命令来查看修改的东西</p>\n</li>\n</ul>\n<h3 id=\"版本回退\">版本回退<a title=\"#版本回退\" href=\"#版本回退\"></a></h3>\n<ul>\n<li>\n<p>使用命令<code>git reset --hard HEAD^</code>来回到上一个版本</p>\n<ul>\n<li><code>HEAD^</code>表示上一个版本</li>\n<li><code>HEAD^^</code>表示回退两个版本，以此类推</li>\n<li><code>HEAD~100</code>表示回退100个版本</li>\n</ul>\n</li>\n<li>\n<p>使用<code>git reflog</code>来查看你的历史操作</p>\n</li>\n<li>\n<p>只在工作区修改，使用<code>git checkout -- &quot;file_name&quot;</code>来撤销工作区的修改</p>\n</li>\n<li>\n<p>已经 add 到暂存区了，使用<code>git reset HEAD &quot;file_name&quot;</code>来撤销暂存区的修改（它是将版本库中的文件恢复到暂存区中），然后再用<code>git checkout -- &quot;file_name&quot;</code>来撤销工作区的修改（它是将暂存区中的文件恢复到工作区中）</p>\n</li>\n</ul>\n<h3 id=\"创建分支\">创建分支<a title=\"#创建分支\" href=\"#创建分支\"></a></h3>\n<ul>\n<li>\n<p>创建分支可以用 <code>git checkout -b dev</code>，相当于两个语句：</p>\n<ul>\n<li><code>git branch dev</code>: 创建分支</li>\n<li><code>git checkout dev</code>: 切换到分支</li>\n</ul>\n</li>\n<li>\n<p><code>git branch</code> 列出所有分支，当前分支前面有个 *</p>\n</li>\n<li>\n<p><code>git checkout -- &quot;file_name&quot;</code>用于恢复文件，从暂存区恢复文件到工作区</p>\n</li>\n<li>\n<p><code>git checkout dev</code>用于切换分支</p>\n</li>\n<li>\n<p><code>git merge dev</code>合并分支，这种方式是 fast forward 方式，也就是直接把 master 指向 dev 的当前提交，所以合并速度非常快</p>\n</li>\n<li>\n<p><code>git merge --no-ff -m &quot;master: merger dev with no-ff&quot; dev</code>，这种方式是因为本次合并要创建一个新的 commit ，所以加上 -m 参数，把 commit 描述写进去，这种方式 master 指向自己的提交</p>\n</li>\n<li>\n<p><code>git branch -d dev</code>用于删除分支</p>\n</li>\n<li>\n<p><code>git log --graph</code>用于查看分支合并图</p>\n</li>\n<li>\n<p>当前任务没完成时，如果需要完成其他任务，可以使用命令<code>git stash</code>先保存当前工作现场，完成其他任务后，切换到原来的分支，然后可以使用命令<code>git stash list</code>来查看保存有哪些工作现场，找到目的工作现场，然后使用<code>git stash pop</code>命令来恢复现场，同时也可以使用<code>git stash apply stash@&#123;0&#125;</code>来恢复<code>stash@&#123;0&#125;</code>的工作现场</p>\n<ul>\n<li><code>git stash apply</code>: 恢复工作现场后，stash 内容不删除，要使用<code>git stash drop</code>来删除</li>\n<li><code>git stash pop</code>恢复工作现场后，stash 内容直接删除了</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"远程仓库\">远程仓库<a title=\"#远程仓库\" href=\"#远程仓库\"></a></h3>\n<ul>\n<li>\n<p>进入你想要和远程仓库关联的本地仓库目录下，使用<code>git remote add origin &quot;远程仓库地址&quot;</code>，添加后 origin 就是远程仓库的地址</p>\n</li>\n<li>\n<p>使用<code>git push -u origin master</code>，将当前分支 master 推送到远程仓库上，由于远程库是空的，我们第一次推送 master 分支时，加上了 -u 参数，git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。以后可以直接使用命令<code>git push origin master</code></p>\n</li>\n<li>\n<p>git 支持多种协议，包括https，但通过 ssh 支持的原生 git 协议速度最快</p>\n</li>\n<li>\n<p>使用命令将<code>git clone &quot;远程仓库地址&quot;</code>克隆到本地</p>\n</li>\n</ul>\n","prev":{"title":"Input 系统启动","link":"2018/03/14/Input系统之启动过程"},"next":{"title":"ANR-ContentProvider","link":"2018/02/24/ANR-ContentProvider"},"plink":"https://zhoufeichi.com/2018/03/11/Git/","toc":[{"id":"创建仓库","title":"创建仓库","index":"1"},{"id":"往仓库添加内容","title":"往仓库添加内容","index":"2"},{"id":"版本回退","title":"版本回退","index":"3"},{"id":"创建分支","title":"创建分支","index":"4"},{"id":"远程仓库","title":"远程仓库","index":"5"}],"reward":true}