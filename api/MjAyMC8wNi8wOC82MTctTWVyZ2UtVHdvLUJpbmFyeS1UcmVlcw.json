{"title":"617-Merge Two Binary Trees","date":"2020-06-07T19:00:17.000Z","date_formatted":{"ll":"Jun 8, 2020","L":"06/08/2020","MM-DD":"06-08"},"link":"2020/06/08/617-Merge-Two-Binary-Trees","tags":["LeetCode"],"categories":["算法"],"updated":"2022-01-25T07:10:30.708Z","content":"<h5 id=\"description\">Description<a title=\"#description\" href=\"#description\"></a></h5>\n<p>Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.</p>\n<p>You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.</p>\n<p>Example 1:</p>\n<p><img src=\"https://blogpic-1301978692.cos.ap-chongqing.myqcloud.com/bolg/mgtree.png\" alt=\"image\" loading=\"lazy\"><br>\n<strong>Note:</strong> The merging process must start from the root nodes of both trees.</p>\n<h5 id=\"code\">Code<a title=\"#code\" href=\"#code\"></a></h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">mergeTrees</span><span class=\"params\">(TreeNode t1, TreeNode t2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t1 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t2;</span><br><span class=\"line\">        Stack &lt; TreeNode[] &gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span> &lt; &gt; ();</span><br><span class=\"line\">        stack.push(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>[] &#123;t1, t2&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack.isEmpty()) &#123;</span><br><span class=\"line\">            TreeNode[] t = stack.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t[<span class=\"number\">0</span>] == <span class=\"literal\">null</span> || t[<span class=\"number\">1</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            t[<span class=\"number\">0</span>].val += t[<span class=\"number\">1</span>].val;</span><br><span class=\"line\">            <span class=\"comment\">//right first</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t[<span class=\"number\">0</span>].right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                t[<span class=\"number\">0</span>].right = t[<span class=\"number\">1</span>].right;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                stack.push(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>[] &#123;t[<span class=\"number\">0</span>].right, t[<span class=\"number\">1</span>].right&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//left</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t[<span class=\"number\">0</span>].left == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                t[<span class=\"number\">0</span>].left = t[<span class=\"number\">1</span>].left;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                stack.push(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>[] &#123;t[<span class=\"number\">0</span>].left, t[<span class=\"number\">1</span>].left&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"VMware安装Hadoop环境","link":"2022/01/24/VMware安装Hadoop环境"},"next":{"title":"ICMP 协议解析","link":"2020/02/20/NetworkKnowleges1"},"plink":"https://zhoufeichi.com/2020/06/08/617-Merge-Two-Binary-Trees/","reward":true}